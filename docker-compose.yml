version: '3'

services:
  # Secure Socket and Auto Update images
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    domainname: watchtower
    restart: unless-stopped
    networks:
      - traefikNetwork
    depends_on:
      - dockerproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    command: --label-enable --cleanup --interval 36000 -H tcp://dockerproxy:2375

  dockerproxy:
    image: tecnativa/docker-socket-proxy
    container_name: dockerproxy
    domainname: dockerproxy
    restart: unless-stopped
    networks:
      - traefikNetwork
    ports:
      - 2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CONTAINERS=1
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer
      - SERVICES=1
      - IMAGES=1 # Portainer, Watchtower
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer, Watchtower
      - POST=1 # Watchtower
      - DELETE=1 # Watchtower
      - CONTAINERS_CREATE=1 # WatchTower
      - CONTAINERS_START=1 # WatchTower
      - CONTAINERS_UPDATE=1 # WatchTower
      - CONTAINERS_DELETE=1 # WatchTower
      - IMAGES_DELETE=1 # WatchTower

  # Web Reverse Proxy
  traefik:
    image: traefik:v2.4
    container_name: traefik
    domainname: ${TRAEFIK_DOMAIN}
    restart: unless-stopped
    networks:
      - traefikNetwork
      - webircNetwork
      - adguardNetwork
      - syncthingNetwork
      - piholeNetwork
    ports:
      - 80:80
      - 443:443
    depends_on:
      - watchtower
    volumes:
      - ${CONFIG_PATH}/traefik/certs:/letsencrypt/
    command:
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.endpoint=tcp://dockerproxy:2375'
      # configure endpoints
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      # SSL configuration
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true'
      - '--certificatesresolvers.letsencryptresolver.acme.httpchallenge.entrypoint=web'
      - '--certificatesresolvers.letsencryptresolver.acme.email=${TRAEFIK_MAIL}'
      - '--certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json'
    dns:
      - ${TRAEFIK_DNS1}
      - ${TRAEFIK_DNS2}
    labels:
      # global redirect to https
      traefik.http.routers.http-catchall.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.routers.http-catchall.priority: 1000
      # middleware redirect
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
  # webservices
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    domainname: portainer
    restart: unless-stopped
    networks:
      - traefikNetwork
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_PATH}/portainer:/data
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer-secure.entrypoints=websecure'
      - 'traefik.http.routers.portainer-secure.rule=Host(`${PORTAINER_DOMAIN}`)'
      - 'traefik.http.routers.portainer-secure.tls=true'
      - 'traefik.http.routers.portainer-secure.tls.certresolver=letsencryptresolver'
      - 'traefik.http.routers.portainer-secure.service=portainer'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
      - 'traefik.docker.network=traefikNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
    command: -H tcp://dockerproxy:2375
    security_opt:
      - no-new-privileges:true
  webirc:
    image: thelounge/thelounge:latest
    container_name: webirc
    domainname: webirc
    restart: unless-stopped
    networks:
      - webircNetwork
    ports:
      - 113:9001
      - 9000:9000
    volumes:
      - ${CONFIG_PATH}/irc:/var/opt/thelounge
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.irc.entrypoints=websecure'
      - 'traefik.http.routers.irc.rule=Host(`${IRC_DOMAIN}`)'
      - 'traefik.http.routers.irc.tls=true'
      - 'traefik.http.routers.irc.tls.certresolver=letsencryptresolver'
      - 'traefik.docker.network=traefikNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
  ncdatabase:
    image: postgres
    container_name: ncdatabase
    networks:
      - nextcloudNetwork
    volumes:
      - ${CONFIG_PATH}/ncdatabase:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
    restart: unless-stopped
  nextcloudapp:
   image: nextcloud
   restart: always
   networks:
     - nextcloudNetwork
     - traefikNetwork
   depends_on:
     - ncdatabase
   volumes:
     - ${SAMBA_HOST_VOLUME}/SyncData:/var/www/html/data
     - ${CONFIG_PATH}/nextcloud:/var/www/html/
   environment:
     - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
     - POSTGRES_DB=nextcloud
     - POSTGRES_USER=${NEXTCLOUD_DB_USER}
     - POSTGRES_HOST=ncdatabase
   labels:
    - 'traefik.enable=true'
    - 'traefik.docker.network=traefikNetwork'
    - 'traefik.http.routers.nextcloud.entrypoints=websecure'
    - 'traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect'
    - 'traefik.http.routers.nextcloud.tls.certresolver=letsencryptresolver'
    - 'traefik.http.routers.nextcloud.rule=Host(`${NEXTCLOUD_HOST}`)'
    - 'traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=ALLOW-FROM https://${NEXTCLOUD_HOST}'
    - 'traefik.http.middlewares.nextcloud.headers.contentSecurityPolicy=frame-ancestors "self" ${NEXTCLOUD_HOST} *.${NEXTCLOUD_HOST}'
    - 'traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011'
    - 'traefik.http.middlewares.nextcloud.headers.stsIncludeSubdomains=true'
    - 'traefik.http.middlewares.nextcloud.headers.stsPreload=true'
    - 'traefik.http.middlewares.nextcloud-caldav.replacepathregex.regex=^/.well-known/ca(l|rd)dav'
    - 'traefik.http.middlewares.nextcloud-caldav.replacepathregex.replacement=/remote.php/dav/'
    - 'traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav'
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    network_mode: service:vpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - vpn
    volumes:
      - ${CONFIG_PATH}/qbittorrent:/config
      - ${SAMBA_HOST_VOLUME}/media:/downloads
    restart: unless-stopped
  # network services
  vpn:
    image: ghcr.io/bubuntux/nordvpn
    cap_add:
      - NET_ADMIN               # Required
    environment:                # Review https://github.com/bubuntux/nordvpn#environment-variables
      - USER=${VPN_USER}    # Required
      - "PASS=${VPN_PASSWORD}"         # Required
      - CONNECT=${VPN_CONNECT}
      - TECHNOLOGY=NordLynx
      - NET_LOCAL=${VPN_LOCAL_NETWORK}
      - NETWORK=${VPN_LOCAL_NETWORK}
    ports:
      - 8080:8080
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1  # Recomended if using ipv4 only
  pihole:
    image: pihole/pihole:nightly
    container_name: pihole
    domainname: pihole
    restart: unless-stopped
    networks:
      - piholeNetwork
    ports:
      - '0.0.0.0:53:53/tcp'
      - '0.0.0.0:53:53/udp'
      - '0.0.0.0:67:67/udp'
      - '8000:80'
    depends_on:
      - watchtower
    volumes:
      - ${CONFIG_PATH}/pihole/etc-pihole/:/etc/pihole/
      - ${CONFIG_PATH}/pihole/etc-dnsmasqd/:/etc/dnsmasq.d/
    environment:
      - ServerIP=${PIHOLE_IP}
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${PIHOLE_PASS}
      - PROXY_LOCATION=pihole
      - VIRTUAL_HOST=${PIHOLE_DOMAIN}
      - VIRTUAL_PORT=${PIHOLE_PORT}
      - DNS1=${PIHOLE_DNS1}
      - DNS2=${PIHOLE_DNS2}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.pihole.entrypoints: web'
      - 'traefik.http.routers.pihole.priority: 2000'
      - 'traefik.http.routers.pihole.rule=Host(`${PIHOLE_DOMAIN}`)'
      - 'traefik.docker.network=piholeNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
    dns:
      - 127.0.0.1
      - ${PIHOLE_DNS1}
      - ${PIHOLE_DNS2}
  samba:
    image: dperson/samba
    restart: unless-stopped
    networks:
      - shareNetwork
    ports:
      - '137:137/udp'
      - '138:138/udp'
      - '139:139/tcp'
      - '445:445/tcp'
    volumes:
      - ${SAMBA_HOST_VOLUME}/media:/mnt:z
    environment:
      - TZ=${TIMEZONE}
    read_only: true
    command: '-s "media;/mnt;yes;no;no;${SAMBA_USER}" -u "${SAMBA_USER};${SAMBA_PASS}" -p'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true
networks:
  shareNetwork:
    external: true
  piholeNetwork:
    external: true
  traefikNetwork:
    external: true
  webircNetwork:
  adguardNetwork:
  syncthingNetwork:
  nextcloudNetwork:
