---
version: '3'

services:
  # Secure Socket and Auto Update images
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    domainname: watchtower
    restart: unless-stopped
    networks:
      - proxyNetwork
    depends_on:
      - dockerproxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    command: --label-enable --cleanup --interval 36000 -H tcp://dockerproxy:2375

  dockerproxy:
    image: tecnativa/docker-socket-proxy
    container_name: dockerproxy
    domainname: dockerproxy
    restart: unless-stopped
    networks:
      - proxyNetwork
    ports:
      - 2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CONTAINERS=1
      - TASKS=1
      - VOLUMES=1
      - SERVICES=1
      - IMAGES=1
      - INFO=1
      - NETWORKS=1
      - POST=1
      - DELETE=1
      - CONTAINERS_CREATE=1
      - CONTAINERS_START=1
      - CONTAINERS_UPDATE=1
      - CONTAINERS_DELETE=1
      - IMAGES_DELETE=1

  # Web Reverse Proxy
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: npm
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '81:81'
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ${CONFIG_PATH}/nginx-proxy-manager:/data
      - ${CONFIG_PATH}/letsencrypt:/etc/letsencrypt
    networks:
      - proxyNetwork
      - webircNetwork
      - piholeNetwork
      - monitoring
  # webservices
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    domainname: portainer
    restart: unless-stopped
    networks:
      - proxyNetwork
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_PATH}/portainer:/data
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    command: -H tcp://dockerproxy:2375
    security_opt:
      - no-new-privileges:true
  webirc:
    image: thelounge/thelounge:latest
    container_name: webirc
    domainname: webirc
    restart: unless-stopped
    networks:
      - webircNetwork
    ports:
      - 113:9001
      - 9000:9000
    volumes:
      - ${CONFIG_PATH}/irc:/var/opt/thelounge
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
  ncdatabase:
    image: postgres
    container_name: ncdatabase
    networks:
      - nextcloudNetwork
    volumes:
      - ${CONFIG_PATH}/ncdatabase:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
    restart: unless-stopped
  nextcloudapp:
    container_name: nextcloud
    image: nextcloud
    restart: always
    networks:
      - nextcloudNetwork
      - proxyNetwork
    depends_on:
      - ncdatabase
    volumes:
      - ${DATA_PATH}/SyncData:/var/www/html/data
      - ${CONFIG_PATH}/nextcloudConfig:/var/www/html/config
    environment:
      - POSTGRES_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=${NEXTCLOUD_DB_USER}
      - POSTGRES_HOST=ncdatabase
  torrents:
    image: crazymax/rtorrent-rutorrent:latest
    container_name: torrents
    expose:
      - "${RT_DHT_PORT}/udp"
      - "${XMLRPC_PORT}"
      - "${RUTORRENT_PORT}"
      - "${WEBDAV_PORT}"
      - "${RT_INC_PORT}"
    networks:
      - proxyNetwork
    ports:
      - target: ${RT_DHT_PORT}
        published: ${RT_DHT_PORT}
        protocol: udp
      - target: ${RUTORRENT_PORT}
        published: ${RUTORRENT_PORT}
        protocol: tcp
      - target: ${WEBDAV_PORT}
        published: ${WEBDAV_PORT}
        protocol: tcp
      - target: ${RT_INC_PORT}
        published: ${RT_INC_PORT}
        protocol: tcp
    volumes:
      - ${CONFIG_PATH}/torrents:/data
      - ${CONFIG_PATH}/torrents/passwd:/passwd
      - ${SAMBA_HOST_VOLUME}/media:/downloads
    ulimits:
      nproc: 65535
      nofile:
        soft: 32000
        hard: 40000
    restart: always

  # network services
  pihole:
    image: pihole/pihole:nightly
    container_name: pihole
    domainname: pihole
    restart: unless-stopped
    networks:
      - piholeNetwork
    ports:
      - '0.0.0.0:53:53/tcp'
      - '0.0.0.0:53:53/udp'
      - '0.0.0.0:67:67/udp'
    depends_on:
      - watchtower
    volumes:
      - ${CONFIG_PATH}/pihole/etc-pihole/:/etc/pihole/
      - ${CONFIG_PATH}/pihole/etc-dnsmasqd/:/etc/dnsmasq.d/
    environment:
      - ServerIP=${PIHOLE_IP}
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${PIHOLE_PASS}
      - VIRTUAL_HOST=${PIHOLE_DOMAIN}
      - DNS1=${PIHOLE_DNS1}
      - DNS2=${PIHOLE_DNS2}
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    dns:
      - 127.0.0.1
      - ${PIHOLE_DNS1}
      - ${PIHOLE_DNS2}
  samba:
    image: dperson/samba
    restart: unless-stopped
    networks:
      - shareNetwork
    ports:
      - '137:137/udp'
      - '138:138/udp'
      - '139:139/tcp'
      - '445:445/tcp'
    volumes:
      - ${SAMBA_HOST_VOLUME}/media:/mnt:z
    environment:
      - TZ=${TIMEZONE}
    read_only: true
    command: '-s "media;/mnt;yes;no;no;${SAMBA_USER}" \
              -u "${SAMBA_USER};${SAMBA_PASS}" -p'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true

  # monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=120d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--query.lookback-delta=90m'
    expose:
      - 9090
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: monitoring_node_exporter
    restart: unless-stopped
    user: "1001"
    networks:
      - monitoring
    expose:
      - 9100

  pihole-exporter:
    image: ekofr/pihole-exporter:latest
    container_name: pihole_exporter
    restart: unless-stopped
    networks:
      - monitoring
      - piholeNetwork
    environment:
      - PIHOLE_HOSTNAME=pihole
      - PIHOLE_PASSWORD=${PIHOLE_PASS}
      - PORT=6317

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: monitoring_cadvisor
    restart: unless-stopped
    privileged: true
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /sys/fs/cgroup/:/sys/fs/cgroup/
      - /var/lib/docker/:/var/lib/docker:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
    expose:
      - 8080

  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    user: '104'
    networks:
      - monitoring
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN}

  speedtest:
    tty: true
    stdin_open: true
    expose:
      - 9798
    ports:
      - 9798:9798
    image: miguelndecarvalho/speedtest-exporter
    restart: always
    networks:
      - monitoring

  ping:
    tty: true
    stdin_open: true
    expose:
      - 9115
    ports:
      - 9115:9115
    image: prom/blackbox-exporter
    restart: always
    volumes:
      - ./config/blackbox/config:/config
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - monitoring

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  shareNetwork:
    external: true
  piholeNetwork:
    external: true
  proxyNetwork:
    external: true
  webircNetwork:
  nextcloudNetwork:
  monitoring:
