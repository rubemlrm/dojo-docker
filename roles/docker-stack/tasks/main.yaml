---
# This deploy-services.yml tasks will be replaced with proper GitOps in future
# https://github.com/veerendra2/raspberrypi-homeserver/issues/54

- name: Create base directory
  file:
    path: "{{ docker_stacks_path }}"
    state: directory
    owner: "{{ username }}"
  become: true

- name: Create volumes
  community.docker.docker_volume:
    name: "{{ item.name }}"
  with_items: "{{ docker_volumes }}"

- name: Create networks
  community.general.docker_network:
    name: "{{ item.name }}"
    driver: overlay
    attachable: true
  with_items: "{{ docker_networks }}"


- name: Deploy duckdns service stacks
  block:
    - name: Create duckdns service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/duckdns"
    - name: Setup duckdns service
      docker_stack:
        state: present
        name: duckdns
        compose:
          - "{{ role_path }}/files/services/duckdns/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        DUCKDNS_DOMAINS: "{{ docker_services_secrets.duckdns.domains }}"
        TOKEN: "{{ docker_services_secrets.duckdns.token }}"
        UID: "{{ docker_configs.puid }}"
        GID: "{{ docker_configs.pgid }}"
  when: docker_stacks.duckdns.enabled is true


- name: Deploy traefik service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8080/tcp"

    - name: permit traffic in default zone for https service
      become: true
      ansible.posix.firewalld:
        service: https
        permanent: true
        immediate: true
        state: enabled

    - name: permit traffic in default zone for http service
      become: true
      ansible.posix.firewalld:
        service: http
        permanent: true
        immediate: true
        state: enabled

    - name: Create traefik service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/traefik/certs"
        - "{{ docker_configs.data_path }}/volumes/traefik/logs"
    - name: Setup traefik service
      docker_stack:
        state: present
        name: traefik
        compose:
          - "{{ role_path }}/files/services/traefik/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        TRAEFIK_MAIL: "{{ docker_services_secrets.traefik.email }}"
        TRAEFIK_DOMAIN: "{{ docker_services_secrets.traefik.domain }}"
        TRAEFIK_DNS1: "{{ docker_services_secrets.traefik.dns_1 }}"
        TRAEFIK_DNS2: "{{ docker_services_secrets.traefik.dns_2 }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.traefik.enabled is true

- name: Deploy portainer service stacks
  block:
    - name: Create portainer service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/portainer"
    - name: Setup portainer service
      docker_stack:
        state: present
        name: portainer
        compose:
          - "{{ role_path }}/files/services/portainer/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        PORTAINER_DOMAIN: "{{ docker_services_secrets.portainer.domain }}"
        DEFAULT_ENDPOINT: "{{ docker_services_secrets.portainer.default_endpoint }}"
        ENABLE_SSL: "{{ docker_services_secrets.portainer.enable_ssl }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.portainer.enabled is true

- name: Deploy irc service stacks
  block:
    - name: Create irc service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/webirc"
    - name: Setup irc service
      docker_stack:
        state: present
        name: irc
        compose:
          - "{{ role_path }}/files/services/irc/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        IRC_DOMAIN: "{{ docker_services_secrets.irc.domain }}"
        IRC_DEFAULT_ENDPOINT: "{{ docker_services_secrets.irc.default_endpoint }}"
        IRC_ENABLE_SSL: "{{ docker_services_secrets.irc.enable_ssl }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.irc.enabled is true


- name: Deploy obsidian service stacks
  block:
    - name: Create obsidian service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/obsidian-sync"
    - name: Setup obsidian-sync service
      docker_stack:
        state: present
        name: obsidian-sync
        compose:
          - "{{ role_path }}/files/services/obsidian-sync/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        OBSIDIAN_DOMAIN: "{{ docker_services_secrets.obsidian_sync.domain }}"
        OBSIDIAN_DEFAULT_ENDPOINT: "{{ docker_services_secrets.obsidian_sync.default_endpoint }}"
        OBSIDIAN_ENABLE_SSL: "{{ docker_services_secrets.obsidian_sync.enable_ssl }}"
        OBSIDIAN_USER: "{{ docker_services_secrets.obsidian_sync.user }}"
        OBSIDIAN_PASSWORD: "{{ docker_services_secrets.obsidian_sync.password }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"

- name: Deploy calibre service stacks
  block:
    - name: Create calibre service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/calibre"
        - "{{ docker_configs.data_path }}/volumes/calibre-web"
    - name: Setup irc service
      docker_stack:
        state: present
        name: calibre
        compose:
          - "{{ role_path }}/files/services/calibre/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        MEDIA_PATH: "{{ docker_configs.media_path }}"
        CALIBRE_DOMAIN: "{{ docker_services_secrets.calibre.domain }}"
        CALIBRE_DEFAULT_ENDPOINT: "{{ docker_services_secrets.calibre.default_endpoint }}"
        CALIBRE_ENABLE_SSL: "{{ docker_services_secrets.calibre.enable_ssl }}"
        CALIBRE_PASSWORD: "{{ docker_services_secrets.calibre.password }}"
        CALIBRE_USERNAME:  "{{ docker_services_secrets.calibre.username }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.irc.enabled is true

- name: Deploy wireguard service stacks
  block:
    - name: Create wireguard service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/wireguard"
        - "{{ docker_configs.data_path }}/volumes/wireguard-ui"
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "51820/tcp"
        - "51820/udp"
    - name: Setup wireguard service
      docker_stack:
        state: present
        name: wireguard
        compose:
          - "{{ role_path }}/files/services/wireguard/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        WIREGUARD_DOMAIN: "{{ docker_services_secrets.wireguard.domain }}"
        WIREGUARD_DEFAULT_ENDPOINT: "{{ docker_services_secrets.wireguard.default_endpoint }}"
        WIREGUARD_ENABLE_SSL: "{{ docker_services_secrets.wireguard.enable_ssl }}"
        WIREGUARD_PASSWORD: "{{ docker_services_secrets.wireguard.password }}"
        WIREGUARD_USERNAME:  "{{ docker_services_secrets.wireguard.username }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"

- name: Deploy filebrowser service stacks
  block:
    - name: Create filebrowser service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/filebrowser"
    - name: Setup filebrowser service
      docker_stack:
        state: present
        name: filebrowser
        compose:
          - "{{ role_path }}/files/services/filebrowser/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        MEDIA_PATH: "{{ docker_configs.media_path }}"
        FILEBROWSER_DOMAIN: "{{ docker_services_secrets.filebrowser.domain }}"
        FILEBROWSER_DEFAULT_ENDPOINT: "{{ docker_services_secrets.filebrowser.default_endpoint }}"
        FILEBROWSER_ENABLE_SSL: "{{ docker_services_secrets.filebrowser.enable_ssl }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"

- name: Deploy backups service stacks
  block:
    - name: Create backups service directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.data_path }}/docker-backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.data_path }}/docker-backups/databases"
          owner: "999"
        - path: "{{ docker_configs.data_path }}/docker-backups/volumes"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups/databases"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups/volumes"
          owner: "{{ username }}"
    - name: Setup backups service
      docker_stack:
        state: present
        name: backups
        compose:
          - "{{ role_path }}/files/services/backups/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        MEDIA_PATH: "{{ docker_configs.media_path }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
        BACKUP_DOMAIN: "{{ docker_services_secrets.backup.domain }}"
        DEFAULT_ENDPOINT: "{{ docker_services_secrets.backup.default_endpoint }}"
        ENABLE_SSL: "{{ docker_services_secrets.backup.enable_ssl }}"
  when: docker_stacks.backups.enabled is true

- name: Deploy pihole service stacks
  block:
    - name: Create pihole service directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/pihole/data"
          owner: "{{ docker_configs.puid }}"
        - path: "{{ docker_configs.data_path }}/volumes/pihole/dns"
          owner: "{{ docker_configs.puid }}"

    - name: permit traffic in default zone for dns service
      become: true
      ansible.posix.firewalld:
        service: dns
        permanent: true
        immediate: true
        state: enabled

    - name: Setup pihole service
      docker_stack:
        state: present
        name: pihole
        compose:
          - "{{ role_path }}/files/services/pihole/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        PIHOLE_IP: "{{ docker_services_secrets.pihole.pihole_ip }}"
        TIMEZONE: "{{ docker_configs.timezone }}"
        PIHOLE_PASS: "{{ docker_services_secrets.pihole.pihole_pass }}"
        PIHOLE_DOMAIN: "{{ docker_services_secrets.pihole.pihole_domain }}"
        PIHOLE_DNS1: "{{ docker_services_secrets.pihole.pihole_dns1 }}"
        PIHOLE_DNS2: "{{ docker_services_secrets.pihole.pihole_dns2 }}"
        DEFAULT_ENDPOINT: "{{ docker_services_secrets.pihole.default_endpoint }}"
        ENABLE_SSL: "{{ docker_services_secrets.pihole.enable_ssl }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.pihole.enabled is true


- name: Deploy monitoring service stacks
  block:
    - name: Setup monitoring service
      docker_stack:
        state: present
        name: monitoring
        compose:
          - "{{ role_path }}/files/services/monitoring/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        PROMETHEUS_DEFAULT_ENDPOINT: "{{ docker_services_secrets.prometheus.default_endpoint }}"
        PROMETHEUS_DOMAIN: "{{ docker_services_secrets.prometheus.domain }}"
        PROMETHEUS_ENABLE_SSL: "{{ docker_services_secrets.prometheus.enable_ssl }}"
        JAEGER_DEFAULT_ENDPOINT: "{{ docker_services_secrets.jaeger.default_endpoint }}"
        JAEGER_DOMAIN: "{{ docker_services_secrets.jaeger.domain }}"
        JAEGER_ENABLE_SSL: "{{ docker_services_secrets.jaeger.enable_ssl }}"
        GRAFANA_PASSWORD: "{{ docker_services_secrets.grafana.password }}"
        GRAFANA_DOMAIN: "{{ docker_services_secrets.grafana.domain }}"
        GRAFANA_ENABLE_SSL: "{{ docker_services_secrets.grafana.enable_ssl }}"
        GRAFANA_DEFAULT_ENDPOINT: "{{ docker_services_secrets.grafana.default_endpoint }}"
        PIHOLE_PASS: "{{ docker_services_secrets.pihole.pihole_pass }}"
  when: docker_stacks.monitoring.enabled is true


- name: Deploy media service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8096/tcp"
        - "8920/tcp"
        - "7539/udp"
        - "1900/udp"
    - name: Create media service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/media/emby"
        - "{{ docker_configs.data_path }}/volumes/media/qbittorrent"
    - name: Setup media service
      docker_stack:
        state: present
        name: media
        compose:
          - "{{ role_path }}/files/services/media/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        MEDIA_PATH: "{{ docker_configs.media_path }}"
        EMBY_DOMAIN: "{{ docker_services_secrets.emby.domain }}"
        EMBY_ENABLE_SSL: "{{ docker_services_secrets.emby.enable_ssl }}"
        EMBY_DEFAULT_ENDPOINT: "{{ docker_services_secrets.emby.default_endpoint }}"
  when: docker_stacks.homemedia.enabled is true


- name: Deploy torrents service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8096/tcp"
        - "8920/tcp"
        - "7539/udp"
        - "1900/udp"
    - name: Create torrents service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/media/qbittorrent"
        - "{{ docker_configs.data_path }}/volumes/torrents/sonarr"
        - "{{ docker_configs.data_path }}/volumes/torrents/radarr"
        - "{{ docker_configs.data_path }}/volumes/torrents/jacket"
    - name: Setup torrents service
      docker_stack:
        state: present
        name: torrents
        compose:
          - "{{ role_path }}/files/services/torrents/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        MEDIA_PATH: "{{ docker_configs.media_path }}"
        TORRENTS_DEFAULT_ENDPOINT: "{{ docker_services_secrets.torrent.default_endpoint }}"
        TORRENTS_ENABLE_SSL: "{{ docker_services_secrets.torrent.enable_ssl }}"
        TORRENTS_DOMAIN: "{{ docker_services_secrets.torrent.domain }}"
        SONARR_DEFAULT_ENDPOINT: "{{ docker_services_secrets.torrent.sonarr_default_endpoint }}"
        SONARR_ENABLE_SSL: "{{ docker_services_secrets.torrent.sonarr_enable_ssl }}"
        SONARR_DOMAIN: "{{ docker_services_secrets.torrent.sonarr_domain }}"
        RADARR_DEFAULT_ENDPOINT: "{{ docker_services_secrets.torrent.radarr_default_endpoint }}"
        RADARR_ENABLE_SSL: "{{ docker_services_secrets.torrent.radarr_enable_ssl }}"
        RADARR_DOMAIN: "{{ docker_services_secrets.torrent.radarr_domain }}"
        JACKET_DEFAULT_ENDPOINT: "{{ docker_services_secrets.torrent.jacket_default_endpoint }}"
        JACKET_ENABLE_SSL: "{{ docker_services_secrets.torrent.jacket_enable_ssl }}"
        JACKET_DOMAIN: "{{ docker_services_secrets.torrent.jacket_domain }}"
        VPN_USER: "{{ docker_services_secrets.torrent.vpn_user }}"
        VPN_PASSWORD: "{{ docker_services_secrets.torrent.vpn_password }}"
        VPN_PROVIDER: "{{ docker_services_secrets.torrent.vpn_provider }}"
        VPN_SERVER_COUNTRIES:  "{{ docker_services_secrets.torrent.vpn_server_countries }}"
  when: docker_stacks.torrents.enabled is true

- name: Deploy website service stacks
  block:
    - name: Create website service directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/matomo/database"
        - path: "{{ docker_configs.data_path }}/volumes/matomo/website"
        - path: "{{ docker_configs.data_path }}/volumes/website/cms"
    - name: Setup website service
      docker_stack:
        state: present
        name: website
        compose:
          - "{{ role_path }}/files/services/website/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        CMS_OAUTH_DOMAIN: "{{ docker_services_secrets.cms.domain }}"
        CMS_DEFAULT_ENDPOINT:  "{{ docker_services_secrets.cms.default_endpoint }}"
        CMS_ENABLE_SSL:  "{{ docker_services_secrets.cms.enable_ssl }}"
        MATOMO_DOMAIN:  "{{ docker_services_secrets.matomo.domain }}"
        MATOMO_DEFAULT_ENDPOINT: "{{ docker_services_secrets.matomo.default_endpoint }}"
        MATOMO_ENABLE_SSL: "{{ docker_services_secrets.matomo.enable_ssl }}"
        MATOMODB_PASS: "{{ docker_services_secrets.matomo.db_password }}"
        MATOMO_DB:  "{{ docker_services_secrets.matomo.db_database }}"
        MATOMO_USER:  "{{ docker_services_secrets.matomo.db_user }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.website.enabled is true

- name: Deploy homeassistant service stacks
  block:
    - name: Create homeassistant service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/homeassistant/homeassistant"
        - "{{ docker_configs.data_path }}/volumes/homeassistant/postgres"
        - "{{ docker_configs.data_path }}/volumes/homeassistant/influxdb"
    - name: Setup homeassistant service
      docker_stack:
        state: present
        name: homeassistant
        compose:
          - "{{ role_path }}/files/services/homeassistant/docker-stack.yml"
      environment:
        DATA_PATH: "{{ docker_configs.data_path }}"
        HOMEASSISTANT_DB: "{{ docker_services_secrets.homeassistant.db_database }}"
        HOMEASSISTANT_DB_USER: "{{ docker_services_secrets.homeassistant.db_user }}"
        HOMEASSISTANT_DB_PASSWORD: "{{ docker_services_secrets.homeassistant.db_password }}"
        HOMEASSISTANT_INFLUX_DB: "{{ docker_services_secrets.homeassistant.influx_db }}"
        HOMEASSISTANT_INFLUX_DB_USER: "{{ docker_services_secrets.homeassistant.influx_db_user }}"
        HOMEASSISTANT_INFLUX_DB_PASSWORD: "{{ docker_services_secrets.homeassistant.influx_db_password }}"
        DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "{{ docker_services_secrets.homeassistant.influx_admin_token }}"
        HOMEASSISTANT_DOMAIN:  "{{ docker_services_secrets.homeassistant.domain }}"
        HOMEASSISTANT_DEFAULT_ENDPOINT: "{{ docker_services_secrets.homeassistant.default_endpoint }}"
        HOMEASSISTANT_ENABLE_SSL: "{{ docker_services_secrets.homeassistant.enable_ssl }}"
        UID: "{{ docker_configs.puid }}"
        GID:  "{{ docker_configs.pgid }}"
  when: docker_stacks.homeassistant.enabled is true
