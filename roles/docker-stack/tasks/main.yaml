---


- name: Create base directory
  file:
    path: "{{ docker_stacks_path }}"
    state: directory
    owner: "{{ username }}"
  become: true

- name: Create volumes
  community.docker.docker_volume:
    name: "{{ item.name }}"
  with_items: "{{ docker_volumes }}"

- name: Create networks
  community.general.docker_network:
    name: "{{ item.name }}"
    attachable: true
    ipam_config:
      - subnet: "{{ item.subnet }}"
  with_items: "{{ docker_networks }}"


- name: Deploy duckdns service stacks
  block:
    - name: Create duckdns service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/duckdns"
    - name: Setup duckdns service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/duckdns/"

- name: Deploy watchtower service stacks
  block:
    - name: Create watchtower service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/watchtower"
    - name: Setup watchtower service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/watchtower/"

- name: Deploy traefik service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8080/tcp"

    - name: permit traffic in default zone for https service
      become: true
      ansible.posix.firewalld:
        service: https
        permanent: true
        immediate: true
        state: enabled

    - name: permit traffic in default zone for http service
      become: true
      ansible.posix.firewalld:
        service: http
        permanent: true
        immediate: true
        state: enabled

    - name: Create traefik service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/traefik/certs"
        - "{{ docker_configs.data_path }}/volumes/traefik/logs"
    - name: Setup traefik service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/traefik/"



- name: Deploy portainer service stacks
  block:
    - name: Create portainer service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/portainer"
    - name: Setup portainer service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/portainer"

- name: Deploy irc service stacks
  block:
    - name: Create irc service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/webirc"
    - name: Setup irc service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/irc"


- name: Deploy obsidian service stacks
  block:
    - name: Create obsidian service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/obsidian-sync"
    - name: Setup obsidian-sync service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/obsidian-sync"


- name: Deploy freshrss service stacks
  block:
    - name: Create freshrss service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/freshrss/data"
        - "{{ docker_configs.data_path }}/volumes/freshrss/extensions"
        - "{{ docker_configs.data_path }}/volumes/freshrss/postgres"
    - name: Setup freshrss service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/freshrss"

- name: Deploy kavita service stacks
  block:
    - name: Create kavita service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/kavita"
    - name: Setup kavita service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/kavita"

- name: Deploy filebrowser service stacks
  block:
    - name: Create filebrowser service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/filebrowser"
    - name: Setup filebrowser service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/filebrowser"


- name: Deploy backups service stacks
  block:
    - name: Create backups service directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.data_path }}/docker-backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.data_path }}/docker-backups/databases"
          owner: "999"
        - path: "{{ docker_configs.data_path }}/docker-backups/volumes"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups/databases"
          owner: "{{ username }}"
        - path: "{{ docker_configs.media_path }}/docker-backups/volumes"
          owner: "{{ username }}"
    - name: Setup backups service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/backups"

- name: Deploy pihole service stacks
  block:
    - name: Create pihole service directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/pihole/data"
          owner: "{{ docker_configs.puid }}"
        - path: "{{ docker_configs.data_path }}/volumes/pihole/dns"
          owner: "{{ docker_configs.puid }}"

    - name: permit traffic in default zone for dns service
      become: true
      ansible.posix.firewalld:
        service: dns
        permanent: true
        immediate: true
        state: enabled

    - name: Setup pihole service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/pihole"


- name: Deploy monitoring service stacks
  block:
    - name: Setup monitoring service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/monitoring"

- name: Deploy media service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8096/tcp"
        - "8920/tcp"
        - "7539/udp"
        - "1900/udp"
    - name: Create media service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/media/emby"
        - "{{ docker_configs.data_path }}/volumes/media/rutorrent"
    - name: Setup media service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/media"

- name: Deploy torrents service stacks
  block:
    - name: Setup Ports
      become: true
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        immediate: true
        state: enabled
      with_items:
        - "8096/tcp"
        - "8920/tcp"
        - "7539/udp"
        - "1900/udp"
        - "8282/tcp"
        - "8001/tcp"
    - name: Create torrents service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/torrents/rtorrent"
        - "{{ docker_configs.data_path }}/volumes/torrents/deluge"
        - "{{ docker_configs.data_path }}/volumes/torrents/sonarr"
        - "{{ docker_configs.data_path }}/volumes/torrents/radarr"
        - "{{ docker_configs.data_path }}/volumes/torrents/jacket"
    - name: Setup torrents service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/torrents"

- name: Deploy website service stacks
  block:
    - name: Create website service directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - path: "{{ docker_configs.data_path }}/volumes/matomo/database"
        - path: "{{ docker_configs.data_path }}/volumes/matomo/website"
        - path: "{{ docker_configs.data_path }}/volumes/website/cms"
    - name: Setup website service
      community.docker.docker_compose:
        build: true
        state: present
        project_src: "{{ role_path }}/files/services/website"

- name: Deploy homeassistant service stacks
  block:
    - name: Create homeassistant service directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
      with_items:
        - "{{ docker_configs.data_path }}/volumes/homeassistant/homeassistant"
        - "{{ docker_configs.data_path }}/volumes/homeassistant/postgres"
        - "{{ docker_configs.data_path }}/volumes/homeassistant/influxdb"
    - name: Setup homeassistant service
      community.docker.docker_compose:
        state: present
        project_src: "{{ role_path }}/files/services/homeassistant"
