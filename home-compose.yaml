---
version: '3'

volumes:
  dojo_pihole_data:
    external: true
  dojo_pihole_dns_data:
    external: true
  dojo_homeassistant_data:
    external: true
  dojo_homeassistant_database:
    external: true
  dojo_influxdb_data:
    external: true
  dojo_freshrss_data:
    external: true

networks:
  monitoring:
    external: true
  shareNetwork:
  piholeNetwork:
  homeassistant:
  proxyNetwork:
    external: true
services:
  pihole:
    image: pihole/pihole:nightly
    container_name: pihole
    domainname: pihole
    restart: unless-stopped
    networks:
      - piholeNetwork
      - proxyNetwork
    ports:
      - '0.0.0.0:53:53/tcp'
      - '0.0.0.0:53:53/udp'
      - '0.0.0.0:67:67/udp'
    expose:
      - 80
    volumes:
      - ./config/pihole/custom.list:/etc/pihole/custom.list
      - dojo_pihole_data:/etc/pihole/
      - dojo_pihole_dns_data:/etc/dnsmasq.d/
    environment:
      - ServerIP=${PIHOLE_IP}
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${PIHOLE_PASS}
      - VIRTUAL_HOST=${PIHOLE_DOMAIN}
      - DNS1=${PIHOLE_DNS1}
      - DNS2=${PIHOLE_DNS2}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.pihole.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.pihole.rule=Host(`${PIHOLE_DOMAIN}`)'
      - 'traefik.http.routers.pihole.tls=${ENABLE_SSL}'
      - 'traefik.http.routers.pihole.tls.certresolver=letsencryptresolver'
      - 'traefik.docker.network=proxyNetwork'
      - 'traefik.http.services.pihole.loadbalancer.server.port=${PIHOLE_PORT}'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
    dns:
      - 127.0.0.1
      - ${PIHOLE_DNS1}
      - ${PIHOLE_DNS2}
  pihole-exporter:
    image: ekofr/pihole-exporter:latest
    restart: unless-stopped
    networks:
      - monitoring
      - piholeNetwork
    environment:
      - PIHOLE_HOSTNAME=pihole
      - PIHOLE_PASSWORD=${PIHOLE_PASS}
    expose:
      - 9617
    ports:
      - 9617:9617

  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ./config/homeassistant/blueprints:/config/blueprints
      - ./config/homeassistant/automations.yaml:/config/automations.yaml
      - ./config/homeassistant/configuration.yaml:/config/configuration.yaml
      - ./config/homeassistant/scenes.yaml:/config/scenes.yaml
      - ./config/homeassistant/scripts.yaml:/config/scripts.yaml
      - ./config/homeassistant/secrets.yaml:/config/secrets.yaml
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - postgres
      - influxdb
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
      - 'traefik.enable=true'
      - 'traefik.http.routers.homeassistant.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.homeassistant.rule=Host(`${HOMEASSISTANT_DOMAIN}`)'
      - 'traefik.http.routers.homeassistant.tls=${ENABLE_SSL}'
      - 'traefik.http.routers.homeassistant.tls.certresolver=letsencryptresolver'
      - 'traefik.http.services.homeassistant.loadbalancer.server.port=8123'

  postgres:
    container_name: postgres
    image: postgres:12.6
    restart: always
    network_mode: host
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${HOMEASSISTANT_DB}
      POSTGRES_USER: ${HOMEASSISTANT_DB_USER}
      POSTGRES_PASSWORD: ${HOMEASSISTANT_DB_PASSWORD}
    volumes:
      - dojo_homeassistant_database:/var/lib/postgresql/data
    labels:
      - 'docker-volume-backup.stop-during-backup=true'

  influxdb:
    container_name: influxdb
    image: influxdb:latest
    restart: always
    network_mode: host
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - INFLUXDB_DB=${HOMEASSISTANT_INFLUX_DB}
      - DOCKER_INFLUXDB_INIT_USERNAME=${HOMEASSISTANT_INFLUX_DB_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${HOMEASSISTANT_INFLUX_DB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=ha-org
      - DOCKER_INFLUXDB_INIT_BUCKET=ha-bucket
    ports:
      - 8086:8086
    volumes:
      - dojo_influxdb_data:/var/lib/influxdb2
    labels:
      - 'docker-volume-backup.stop-during-backup=true'

  webirc:
    image: thelounge/thelounge:latest
    container_name: webirc
    domainname: webirc
    restart: unless-stopped
    networks:
      - proxyNetwork
    ports:
      - 113:9001
      - 9000:9000
    volumes:
      - ${CONFIG_PATH}/irc:/var/opt/thelounge
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.irc.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.irc.rule=Host(`${IRC_DOMAIN}`)'
      - 'traefik.http.routers.irc.tls==${ENABLE_SSL}'
      - 'traefik.http.routers.irc.tls.certresolver=letsencryptresolver'
      - 'traefik.docker.network=proxyNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'

  freshrss:
    image: freshrss/freshrss
    container_name: freshrss
    domainname: freshrss
    restart: unless-stopped
    networks:
      - proxyNetwork
    volumes:
      - dojo_freshrss_data:/var/opt/thelounge
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.freshrss.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.freshrss.rule=Host(`${FRESHRSS_DOMAIN}`)'
      - 'traefik.http.routers.freshrss.tls==${ENABLE_SSL}'
      - 'traefik.http.routers.freshrss.tls.certresolver=letsencryptresolver'
      - 'traefik.http.routers.freshrss.middlewares=freshrssM1,freshrssM2'
      - 'traefik.http.middlewares.freshrssM1.compress=true'
      - 'traefik.http.middlewares.freshrssM2.headers.browserXssFilter=true'
      - 'traefik.http.middlewares.freshrssM2.headers.forceSTSHeader=true'
      - 'traefik.http.middlewares.freshrssM2.headers.frameDeny=true'
      - 'traefik.http.middlewares.freshrssM2.headers.referrerPolicy=no-referrer-when-downgrade'
      - 'traefik.http.middlewares.freshrssM2.headers.stsSeconds=31536000'
      - 'traefik.docker.network=proxyNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
    environment:
      TZ: Europe/Lisbon
      CRON_MIN: '3,33'
