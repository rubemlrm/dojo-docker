---
version: '3'

volumes:
  qbittorrent_data: {}
  pihole_data: {}
  pihole_dns_data: {}
  jellyfin_data: {}

networks:
  monitoring:
    external: true
  shareNetwork:
  piholeNetwork:
  proxyNetwork:
    external: true
services:
  torrents:
    image: crazymax/rtorrent-rutorrent:latest
    networks:
      - proxyNetwork
    volumes:
      - "${SAMBA_HOST_VOLUME}:/downloads"
    ulimits:
      nproc: 65535
      nofile:
        soft: 32000
        hard: 40000
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.torrents.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.torrents.rule=Host(`${TORRENT_DOMAIN}`)'
      - 'traefik.http.routers.torrents.tls=${ENABLE_SSL}'
      - 'traefik.http.routers.torrents.tls.certresolver=letsencryptresolver'
      - 'traefik.http.services.torrents.loadbalancer.server.port=8080'
      - 'traefik.docker.network=proxyNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    networks:
      - proxyNetwork
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Europe/London
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_IP} #optional
    volumes:
      - jellyfin_data:/config
      - ${SAMBA_HOST_VOLUME}:/data
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jellyfin.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_DOMAIN}`)'
      - 'traefik.http.routers.jellyfin.tls=${ENABLE_SSL}'
      - 'traefik.http.routers.jellyfin.tls.certresolver=letsencryptresolver'
      - 'traefik.http.services.jellyfin.loadbalancer.server.port=8096'
      - 'traefik.docker.network=proxyNetwork'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
  pihole:
    image: pihole/pihole:nightly
    container_name: pihole
    domainname: pihole
    restart: unless-stopped
    networks:
      - piholeNetwork
      - proxyNetwork
    ports:
      - '0.0.0.0:53:53/tcp'
      - '0.0.0.0:53:53/udp'
      - '0.0.0.0:67:67/udp'
    expose:
      - 80
    volumes:
      - ./config/pihole/custom.list:/etc/pihole/custom.list
      - pihole_data:/etc/pihole/
      - pihole_dns_data:/etc/dnsmasq.d/
    environment:
      - ServerIP=${PIHOLE_IP}
      - TZ=${TIMEZONE}
      - WEBPASSWORD=${PIHOLE_PASS}
      - VIRTUAL_HOST=${PIHOLE_DOMAIN}
      - DNS1=${PIHOLE_DNS1}
      - DNS2=${PIHOLE_DNS2}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.pihole.entrypoints=${DEFAULT_ENDPOINT}'
      - 'traefik.http.routers.pihole.rule=Host(`${PIHOLE_DOMAIN}`)'
      - 'traefik.http.routers.pihole.tls=${ENABLE_SSL}'
      - 'traefik.http.routers.pihole.tls.certresolver=letsencryptresolver'
      - 'traefik.docker.network=proxyNetwork'
      - 'traefik.http.services.pihole.loadbalancer.server.port=${PIHOLE_PORT}'
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'docker-volume-backup.stop-during-backup=true'
    dns:
      - 127.0.0.1
      - ${PIHOLE_DNS1}
      - ${PIHOLE_DNS2}
  pihole-exporter:
    image: ekofr/pihole-exporter:latest
    restart: unless-stopped
    networks:
      - monitoring
      - piholeNetwork
    environment:
      - PIHOLE_HOSTNAME=pihole
      - PIHOLE_PASSWORD=${PIHOLE_PASS}
    expose:
      - 9617
    ports:
      - 9617:9617
